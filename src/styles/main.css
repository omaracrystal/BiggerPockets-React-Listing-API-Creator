@charset "UTF-8";
/* -------------------------- NORMALIZE -------------------------- */
@import url(../../node_modules/normalize.css);
/* ---------------------------- GLOBAL ---------------------------- */
/*
MIXIN DETAILS = http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/

* Accepts either px or rem as an input value
* Accepts (almost) any property as an input, not only font-size
* Accepts multiple values, like 10px 20px (for padding or margin as an example)

* The mixin relies on a baseline of 10px
* The mixin relies on a function to parse the integer from a value with a unit
* We define a list of values for both units
* We iterate through each value in the given parameter $values
* If the value is either auto or 0, we append it to the list as-is
* If the value has a unit, we split it to get both the unit and the raw value
* We append according values to the lists depending on the unit of the given value
* If the two lists are the same, we ouput only one (like margin-top: 0)
* We output the result

There are still some issues with this mixin:

* Doesn’t work with all properties (border shorthand among others)
* Doesn’t fallback if you input a wrong value (wrong unit or unitless value as an example)
* Relies on a defined baseline; however this is easily fixed by adding a $baseline parameter to the mixin
* Relies on a parseInt() function; I’ve proposed it to Compass, let’s hope they add it anytime soon
* Doesn't recognize !important
* Deosn't work with percentages %

/*

** - EXAMPLE: - **
html {
  font-size: 62.5%;
}

body {
  @include rem(font-size, 1.6rem);
  @include rem(padding, 20px 10px);
}
… outputs:

html {
  font-size: 62.5%;
}

body {
  font-size: 16px;  // Fallback for IE8
  font-size: 1.6rem;
  padding: 20px 10px; // Fallback for IE8
  padding: 2rem 1rem;
}

*/
html {
  font-size: 62.5%; }

body {
  background-color: #F4F4F4;
  font-family: "Open Sans", "Arial", "Helvetica", "sans-serif";
  /* 3 */
  /* 3 */
  /* 4 */
  /* 6 */
  /* 6 */
  /* 7 */
  font-size: 14px;
  /* 9 */
  font-size: 1.4rem;
  /* 9 */
  line-height: 1.5;
  color: #000000;
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
  font-smoothing: antialiased;
  -webkit-font-smoothing: antialiased;
  -moz-font-smoothing: antialiased;
  -o-font-smoothing: antialiased;
  text-rendering: optimizeLegibility; }

a {
  text-decoration: none;
  cursor: pointer;
  transition: all 0.3s ease; }
  a:hover, a:focus, a:active, a:visited {
    text-decoration: none; }

b, strong {
  font-weight: 600; }

h1,
.h1 {
  /* 3 */
  /* 3 */
  /* 4 */
  /* 6 */
  /* 6 */
  /* 7 */
  font-size: 48px;
  /* 9 */
  font-size: 4.8rem;
  /* 9 */ }

h2,
.h2 {
  /* 3 */
  /* 3 */
  /* 4 */
  /* 6 */
  /* 6 */
  /* 7 */
  font-size: 36px;
  /* 9 */
  font-size: 3.6rem;
  /* 9 */ }

h3,
.h3 {
  /* 3 */
  /* 3 */
  /* 4 */
  /* 6 */
  /* 6 */
  /* 7 */
  font-size: 24px;
  /* 9 */
  font-size: 2.4rem;
  /* 9 */ }

h4,
.h4 {
  /* 3 */
  /* 3 */
  /* 4 */
  /* 6 */
  /* 6 */
  /* 7 */
  font-size: 18px;
  /* 9 */
  font-size: 1.8rem;
  /* 9 */ }

h5,
.h5 {
  /* 3 */
  /* 3 */
  /* 4 */
  /* 6 */
  /* 6 */
  /* 7 */
  font-size: 16px;
  /* 9 */
  font-size: 1.6rem;
  /* 9 */ }

h6,
.h6 {
  /* 3 */
  /* 3 */
  /* 4 */
  /* 6 */
  /* 6 */
  /* 7 */
  font-size: 14px;
  /* 9 */
  font-size: 1.4rem;
  /* 9 */ }

input {
  cursor: pointer !important; }

li {
  list-style: none; }

/* -------------------------- COMPONENTS -------------------------- */
.App-form .form-input {
  padding: 10px; }

.App-form .form-button-save {
  padding: 10px;
  width: 100px;
  background: #4A90E2;
  color: #ffffff;
  font-weight: 300; }

/* -------------------------- CONTAINERS -------------------------- */
.App {
  text-align: center;
  color: #000000;
  background: #F4F4F4; }

.App-header {
  padding: 50px; }
